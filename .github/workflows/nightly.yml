name: Nightly Release

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      tag: ${{ steps.bump.outputs.new_tag }}
      should_skip: ${{ steps.check_commits.outputs.skip }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git config
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Check for new commits since last tag
        id: check_commits
        run: |
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || echo "")
          if [ -z "$LATEST_TAG" ]; then
            echo "No existing tags found, this will be the first release"
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "latest_tag=v0.0.0" >> $GITHUB_OUTPUT
          else
            echo "Latest tag is $LATEST_TAG"
            COMMITS=$(git log $LATEST_TAG..origin/master --oneline)
            if [ -z "$COMMITS" ]; then
              echo "No new commits since $LATEST_TAG"
              echo "skip=true" >> $GITHUB_OUTPUT
            else
              echo "New commits detected"
              echo "skip=false" >> $GITHUB_OUTPUT
            fi
            echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Stop workflow if no new commits
        if: steps.check_commits.outputs.skip == 'true'
        run: |
          echo "No new commits, stopping the workflow."
          exit 0

      - name: Bump patch version
        id: bump
        if: steps.check_commits.outputs.skip == 'false'
        run: |
          LATEST_TAG="${{ steps.check_commits.outputs.latest_tag }}"
          VERSION="${LATEST_TAG#v}"
          IFS='.' read -r major minor patch <<< "$VERSION"
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"
          echo "New tag: $new_tag"
          echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"

      - name: Create and push new tag
        if: steps.check_commits.outputs.skip == 'false'
        run: |
          git tag ${{ steps.bump.outputs.new_tag }}
          git push origin ${{ steps.bump.outputs.new_tag }}

      - name: Create GitHub draft release
        if: steps.check_commits.outputs.skip == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.bump.outputs.new_tag }} --draft --title ${{ steps.bump.outputs.new_tag }} --notes "Nightly automated release"

  build-plugin:
    needs: ["create-release"]
    if: needs.create-release.outputs.should_skip == 'false'
    name: Build Roblox Studio Plugin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Aftman
        uses: ok-nick/setup-aftman@v0.4.2
        with:
          version: 'v0.3.0'

      - name: Build Plugin
        run: rojo build plugin.project.json --output Rojo.rbxm

      - name: Upload Plugin to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ needs.create-release.outputs.tag }} Rojo.rbxm

      - name: Upload Plugin to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Rojo.rbxm
          path: Rojo.rbxm

  build:
    needs: ["create-release"]
    if: needs.create-release.outputs.should_skip == 'false'
    strategy:
      fail-fast: false
      matrix:
        # https://doc.rust-lang.org/rustc/platform-support.html
        include:
          - host: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            label: linux-x86_64

          - host: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            label: windows-x86_64

          - host: macos
            os: macos-latest
            target: x86_64-apple-darwin
            label: macos-x86_64

          - host: macos
            os: macos-latest
            target: aarch64-apple-darwin
            label: macos-aarch64

    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    env:
      BIN: rojo
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Restore Rust Cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Aftman
        uses: ok-nick/setup-aftman@v0.4.2
        with:
          version: 'v0.3.0'

      - name: Build Release
        run: cargo build --release --locked --verbose --target ${{ matrix.target }}

      - name: Save Rust Cache
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate Artifact Name
        shell: bash
        env:
          TAG_NAME: ${{ needs.create-release.outputs.tag }}
        run: |
          echo "ARTIFACT_NAME=$BIN-${TAG_NAME#v}-${{ matrix.label }}.zip" >> "$GITHUB_ENV"

      - name: Create Archive and Upload to Release
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir staging

          if [ "${{ matrix.host }}" = "windows" ]; then
            cp "target/${{ matrix.target }}/release/$BIN.exe" staging/
            cd staging
            7z a ../$ARTIFACT_NAME *
          else
            cp "target/${{ matrix.target }}/release/$BIN" staging/
            cd staging
            zip ../$ARTIFACT_NAME *
          fi

          gh release upload ${{ needs.create-release.outputs.tag }} ../$ARTIFACT_NAME
